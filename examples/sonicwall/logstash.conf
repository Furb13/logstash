input {
  udp {
    port => 514
    type => sonicwall
  }
}
filter {
  if [host] == "XXX.XXX.XXX.XXX" { #add sending IP address of syslog messages

    grok {
      match => [ "message", "%{TIMESTAMP_ISO8601:timestamp} %{GREEDYDATA:other_data}"]
    }
	
    date {
      match => [ "timestamp", "YYYY-MM-dd HH:mm:ss" ]
      timezone => "UTC"
      remove_field => [ "timestamp" ]
    }

    kv {
      source => "other_data"
	  exclude_keys => [ "n" ]
    }

    mutate {
      rename => { "m" => "event_id" }
      rename => { "msg" => "event_content"	}
	  remove_field => [ "other_data" ]
    }
	
	translate {
	  dictionary_path => "/usr/share/logstash/dictionary/sonicwall-dictionary.json"
	  destination => "dictionary_data"
	  field => "event_id"
	  
	}
	
	kv {
	  source => "dictionary_data"
      field_split => "|"
      value_split => ":"
	}
	
	# The grok filter is not working correctly
#	if [ec_grok] {
#	  grok {
#	    match => [ "event_content", "%{ec_grok}"]
#	  }
#	}
	
	if [ec_replace] {
	  mutate {
	    replace => { "event_content" => "%{ec_replace}" }
	  }
	}
	
	
	if [src] {
	 grok {
	   match => [ "src", "%{IP:source_ip}%{DATA}"]
	 }
	 if [source_ip] =~ /^10\./ {
	
	  } else {
	    mutate {
	      copy => {"source_ip" => "xff_clientip"}
	    }
	    geoip {
          source => "xff_clientip"
        }
		mutate {
	      remove_field => [ "[geoip][country_code2]", "[geoip][country_code3]" ]
        }
	  }
	}
	
	if [dst] {
	  grok {
	   match => [ "dst", "%{IP:destination_ip}%{DATA}"]
	  }
	  mutate {
	    remove_field => [ "dst" ]
      }
	}
  } else {
    drop { }
  }
  
  mutate {
   remove_field => [ "dictionary_data", "ec_grok", "ec_replace", "src", "dst" ]
   lowercase => [ "usr" ] 
  }
}
output {
  elasticsearch {
    hosts => ["localhost:9200"]
    index => "%{type}-%{+YYYY.MM.dd}"
  }
}
